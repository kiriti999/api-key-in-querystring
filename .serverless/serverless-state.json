{
  "service": {
    "service": "api-key-in-query-string-v2",
    "serviceObject": {
      "name": "api-key-in-query-string-v2"
    },
    "provider": {
      "name": "aws",
      "region": "ap-southeast-2",
      "runtime": "python3.8",
      "timeout": 30,
      "apiGateway": {
        "apiKeys": [
          {
            "value": "uat-unbounce-api-key",
            "description": "Api key description"
          }
        ],
        "usagePlan": {
          "quota": {
            "limit": 5000,
            "offset": 2,
            "period": "MONTH"
          },
          "throttle": {
            "burstLimit": 200,
            "rateLimit": 100
          }
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-key-in-query-string-v2-uat-authorizer"
            }
          },
          "BackendFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-key-in-query-string-v2-uat-BackendFunction"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "api-key-in-query-string-v2",
                        "uat",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-key-in-query-string-v2-uat*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-key-in-query-string-v2-uat*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "api-key-in-query-string-v2",
                    "uat",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-key-in-query-string-v2/uat/1654031708363-2022-05-31T21:15:08.363Z/api-key-in-query-string-v2.zip"
              },
              "Handler": "./auth_function/app.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "api-key-in-query-string-v2-uat-authorizer",
              "MemorySize": 1024,
              "Timeout": 30,
              "Description": "Extracts api key, authenticates against usage plan, allow/deny http methods and returns auth response object",
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizerLogGroup"
            ]
          },
          "BackendFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-key-in-query-string-v2/uat/1654031708363-2022-05-31T21:15:08.363Z/api-key-in-query-string-v2.zip"
              },
              "Handler": "./short_funnel/app.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "api-key-in-query-string-v2-uat-BackendFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BackendFunctionLogGroup"
            ]
          },
          "AuthorizerLambdaVersionSifBkX41wOF3gtcoNWEYLoU8IeKlSHudJxbzDFhg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizerLambdaFunction"
              },
              "CodeSha256": "VgBTN8v+c5VjoWNB8d/1CwCSRpgkuyVBCtWs9gDWuUE=",
              "Description": "Extracts api key, authenticates against usage plan, allow/deny http methods and returns auth response object"
            }
          },
          "BackendFunctionLambdaVersionu2piGTIa9eqRVhHNzf8pmF5PC8isdDpw6mPhSveqj3o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BackendFunctionLambdaFunction"
              },
              "CodeSha256": "VgBTN8v+c5VjoWNB8d/1CwCSRpgkuyVBCtWs9gDWuUE="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "uat-api-key-in-query-string-v2",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceShortfunnelDashhealth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "shortfunnel-health",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceShortfunnelDashenergy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "shortfunnel-energy",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodShortfunnelDashhealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceShortfunnelDashhealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BackendFunctionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodShortfunnelDashhealthPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceShortfunnelDashhealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BackendFunctionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodShortfunnelDashenergyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceShortfunnelDashenergy"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BackendFunctionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "REQUEST"
            }
          },
          "ApiGatewayDeployment1654031705505": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "uat"
            },
            "DependsOn": [
              "ApiGatewayMethodShortfunnelDashhealthGet",
              "ApiGatewayMethodShortfunnelDashhealthPost",
              "ApiGatewayMethodShortfunnelDashenergyPost"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Value": "uat-unbounce-api-key",
              "Description": "Api key description",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "uat"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1654031705505"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1654031705505",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "uat"
                }
              ],
              "Description": "Usage plan for api-key-in-query-string-v2 uat stage",
              "UsagePlanName": "api-key-in-query-string-v2-uat",
              "Quota": {
                "Limit": 5000,
                "Offset": 2,
                "Period": "MONTH"
              },
              "Throttle": {
                "BurstLimit": 200,
                "RateLimit": 100
              }
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "BackendFunctionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BackendFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-api-key-in-query-string-v2-uat-ServerlessDeploymentBucketName"
            }
          },
          "AuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizerLambdaVersionSifBkX41wOF3gtcoNWEYLoU8IeKlSHudJxbzDFhg"
            },
            "Export": {
              "Name": "sls-api-key-in-query-string-v2-uat-AuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "BackendFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BackendFunctionLambdaVersionu2piGTIa9eqRVhHNzf8pmF5PC8isdDpw6mPhSveqj3o"
            },
            "Export": {
              "Name": "sls-api-key-in-query-string-v2-uat-BackendFunctionLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/uat"
                ]
              ]
            },
            "Export": {
              "Name": "sls-api-key-in-query-string-v2-uat-ServiceEndpoint"
            }
          },
          "ShortFunnelApiHealth": {
            "Description": "API Gateway endpoint URL for dev stage for api key validation in query string",
            "Value": {
              "Fn::Sub": "https://{sls:instanceId}.execute-api.${AWS::Region}.amazonaws.com/dev/shortfunnel-health?apiKey=uat-unbounce-api-key"
            }
          },
          "ShortFunnelApiEnergy": {
            "Description": "API Gateway endpoint URL for dev stage for api key validation in query string",
            "Value": {
              "Fn::Sub": "https://{sls:instanceId}.execute-api.${AWS::Region}.amazonaws.com/dev/shortfunnel-energy?apiKey=uat-unbounce-api-key"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "authorizer": {
        "description": "Extracts api key, authenticates against usage plan, allow/deny http methods and returns auth response object",
        "handler": "./auth_function/app.lambda_handler",
        "events": [],
        "name": "api-key-in-query-string-v2-uat-authorizer",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "AuthorizerLambdaVersionSifBkX41wOF3gtcoNWEYLoU8IeKlSHudJxbzDFhg"
      },
      "BackendFunction": {
        "handler": "./short_funnel/app.lambda_handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "shortfunnel-health",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "post",
              "path": "shortfunnel-health",
              "authorizer": {
                "type": "request",
                "name": "authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "post",
              "path": "shortfunnel-energy",
              "authorizer": {
                "type": "request",
                "name": "authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-key-in-query-string-v2-uat-BackendFunction",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "BackendFunctionLambdaVersionu2piGTIa9eqRVhHNzf8pmF5PC8isdDpw6mPhSveqj3o"
      }
    },
    "resources": {
      "Outputs": {
        "ShortFunnelApiHealth": {
          "Description": "API Gateway endpoint URL for dev stage for api key validation in query string",
          "Value": {
            "Fn::Sub": "https://{sls:instanceId}.execute-api.${AWS::Region}.amazonaws.com/dev/shortfunnel-health?apiKey=uat-unbounce-api-key"
          }
        },
        "ShortFunnelApiEnergy": {
          "Description": "API Gateway endpoint URL for dev stage for api key validation in query string",
          "Value": {
            "Fn::Sub": "https://{sls:instanceId}.execute-api.${AWS::Region}.amazonaws.com/dev/shortfunnel-energy?apiKey=uat-unbounce-api-key"
          }
        }
      },
      "Resources": {}
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "api-key-in-query-string-v2",
      "frameworkVersion": "3",
      "configValidationMode": "error",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "D:\\projects\\practice\\aws\\api-key-in-querystring\\.serverless\\api-key-in-query-string-v2.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/api-key-in-query-string-v2/uat/1654031708363-2022-05-31T21:15:08.363Z",
    "artifact": "api-key-in-query-string-v2.zip"
  }
}